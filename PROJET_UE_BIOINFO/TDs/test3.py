p = 0.7*0.7*0.7*0.7*0.7*0.6*0.3*0.2*0.3
p = (0.7*0.2)*(0.7*0.7*0.3)*(0.7*0.6*0.3)*0.7*0.25*0.25
print(p*100)

import numpy as np

freq = np.array([[1, 9, 1, 1, 1, 1, 1, 2, 3], [9, 1, 9, 1, 1, 1, 3, 1, 3], [1, 1, 1, 9, 1, 6, 5, 6, 3], [1, 1, 1, 1, 9, 4, 3, 3, 3]])
MPP = np.array([[0.08333333, 0.75, 0.08333333, 0.08333333, 0.08333333, 0.08333333, 0.08333333, 0.16666667, 0.25], [0.75, 0.08333333, 0.75, 0.08333333, 0.08333333, 0.08333333, 0.25, 0.08333333, 0.25], [0.08333333, 0.08333333, 0.08333333, 0.75, 0.08333333, 0.5, 0.41666667, 0.5, 0.25], [0.08333333, 0.08333333, 0.08333333, 0.08333333, 0.75, 0.33333333, 0.25, 0.25, 0.25]])

def matricePoidsPosition(freq, MPP):
    s = freq[:,0].sum()
    MPPcalc = (freq/float(s)).round(8)
    print (MPP == MPPcalc).all()

print(matricePoidsPosition(freq, MPP))
   

MPP = np.array([[0.08333333, 0.75, 0.08333333, 0.08333333, 0.08333333, 0.08333333, 0.08333333, 0.16666667, 0.25], [0.75, 0.08333333, 0.75, 0.08333333, 0.08333333, 0.08333333, 0.25, 0.08333333, 0.25], [0.08333333, 0.08333333, 0.08333333, 0.75, 0.08333333, 0.5, 0.41666667, 0.5, 0.25],[0.08333333, 0.08333333, 0.08333333, 0.08333333, 0.75, 0.33333333, 0.25, 0.25, 0.25]])

def nulModel(MPP):
    taille = len(MPP[0])
    Mnul = (np.sum(MPP, axis = 1)/float(taille)).round(2)
    return Mnul

print(nulModel(MPP))
proba = 0.25*0.28*0.24*0.3*0.25
print(proba)

p0 = 0.1+0.7+0.1+0.1+0.1+0.1+0.1+0.2+0.3+0.23
print(p0/)